=begin
#OneRoster OpenAPI (JSON) Definition

#The OneRoster service binding is available in WSDL/XSD and REST/JSON. The model is based upon the IMS PSM modelling approach.

OpenAPI spec version: 1.1
Contact: platform@strongmind.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.34
=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for OneRosterClient::ClassType
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ClassType' do
  before do
    # run before each test
    obj = build(:one_roster_class)
    @instance = OneRosterClient::ClassType.build_from_hash(obj.to_hash)
  end

  after do
    # run after each test
  end

  describe 'test an instance of ClassType' do
    it 'should create an instance of ClassType' do
      expect(@instance).to be_instance_of(OneRosterClient::ClassType)
    end
  end
  describe 'test attribute "title"' do
    it 'should work' do
      expect(@instance.title).to be_a(String)
    end
  end

  describe 'test attribute "class_code"' do
    it 'should work' do
      expect(@instance.class_code).to be_a(String)
    end
  end

  describe 'test attribute "class_type"' do
    it 'should work' do
      expect(@instance.class_type).to be_a(String)
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["homeroom", "scheduled"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.class_type = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "location"' do
    it 'should work' do
      expect(@instance.location).to be_a(String)
    end
  end

  describe 'test attribute "grades"' do
    it 'should work' do
      expect(@instance.grades).to be_a(Array)
      @instance.grades.each do |gr|
        expect(gr).to be_a(String)
      end
    end
  end

  describe 'test attribute "subjects"' do
    it 'should work' do
      expect(@instance.subjects).to be_a(Array)
      @instance.subjects.each do |s|
        expect(s).to be_a(String)
      end
    end
  end

  describe 'test attribute "course"' do
    it 'should work' do
      expect(@instance.course).to be_a(OneRosterClient::GUIDRefType)
    end
  end

  describe 'test attribute "school"' do
    it 'should work' do
      expect(@instance.school).to be_instance_of(OneRosterClient::GUIDRefType)
    end
  end

  describe 'test attribute "terms"' do
    it 'should work' do
      expect(@instance.terms).to be_a(Array)
      @instance.terms.each do |t|
        expect(t).to be_a(OneRosterClient::GUIDRefType)
      end
    end
  end

  describe 'test attribute "subject_codes"' do
    it 'should work' do
      expect(@instance.subject_codes).to be_a(Array)
      @instance.subject_codes.each do |s|
        expect(s).to be_a(String)
      end
    end
  end

  describe 'test attribute "periods"' do
    it 'should work' do
      expect(@instance.periods).to be_a(Array)
      @instance.periods.each do |p|
        expect(p).to be_a(String)
      end
    end
  end

  describe 'test attribute "resources"' do
    it 'should work' do
      expect(@instance.resources).to be_a(Array)
      @instance.resources.each do |r|
        expect(r).to be_a(OneRosterClient::GUIDRefType)
      end
    end
  end

  describe 'test attribute "sourced_id"' do
    it 'should work' do
      expect(@instance.sourced_id).to be_a(String)
    end
  end

  describe 'test attribute "status"' do
    it 'should work' do
      expect(@instance.status).to be_a(String)
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["active", "tobedeleted"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.status = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "date_last_modified"' do
    it 'should work' do
      expect(@instance.date_last_modified).to be_a(DateTime)
    end
  end

  describe 'test attribute "metadata"' do
    it 'should work' do
      expect(@instance.metadata).to be_a(Hash)
    end
  end

end
