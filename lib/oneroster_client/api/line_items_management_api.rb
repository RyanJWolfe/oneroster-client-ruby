=begin
#OneRoster OpenAPI (JSON) Definition

#The OneRoster service binding is available in WSDL/XSD and REST/JSON. The model is based upon the IMS PSM modelling approach.

OpenAPI spec version: 1.1
Contact: platform@strongmind.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.34
=end

module OneRosterClient
  class LineItemsManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # The REST delete request message for the deleteLineItem() API call.
    # ...not supplied...
    # @param sourced_id ...tbd...
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_line_item(sourced_id, opts = {})
      delete_line_item_with_http_info(sourced_id, opts)
      nil
    end

    # The REST delete request message for the deleteLineItem() API call.
    # ...not supplied...
    # @param sourced_id ...tbd...
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_line_item_with_http_info(sourced_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LineItemsManagementApi.delete_line_item ...'
      end
      # verify the required parameter 'sourced_id' is set
      if @api_client.config.client_side_validation && sourced_id.nil?
        fail ArgumentError, "Missing the required parameter 'sourced_id' when calling LineItemsManagementApi.delete_line_item"
      end
      # resource path
      local_var_path = '/lineItems/{sourcedId}'.sub('{' + 'sourcedId' + '}', sourced_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['OAuth2Security']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LineItemsManagementApi#delete_line_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # The REST read request message for the getLineItem() API call.
    # ...not supplied...
    # @param sourced_id ...tbd...
    # @param [Hash] opts the optional parameters
    # @return [SingleLineItemType]
    def get_line_item(sourced_id, opts = {})
      data, _status_code, _headers = get_line_item_with_http_info(sourced_id, opts)
      data
    end

    # The REST read request message for the getLineItem() API call.
    # ...not supplied...
    # @param sourced_id ...tbd...
    # @param [Hash] opts the optional parameters
    # @return [Array<(SingleLineItemType, Integer, Hash)>] SingleLineItemType data, response status code and response headers
    def get_line_item_with_http_info(sourced_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LineItemsManagementApi.get_line_item ...'
      end
      # verify the required parameter 'sourced_id' is set
      if @api_client.config.client_side_validation && sourced_id.nil?
        fail ArgumentError, "Missing the required parameter 'sourced_id' when calling LineItemsManagementApi.get_line_item"
      end
      # resource path
      local_var_path = '/lineItems/{sourcedId}'.sub('{' + 'sourcedId' + '}', sourced_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'SingleLineItemType' 

      auth_names = opts[:auth_names] || ['OAuth2Security']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LineItemsManagementApi#get_line_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # The REST read request message for the getLineItems() API call.
    # ...not supplied...
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit To define the download segmentation value i.e. the maximum number of records to be contained in the response. (default to 100)
    # @option opts [Integer] :offset The number of the first record to be supplied in the segmented response message. (default to 0)
    # @option opts [String] :continuation_token Allows the client to resume retrieving results from where the previous page left off
    # @option opts [String] :sort Identifies the sort criteria to be used for the records in the response message. Use with the orderBy parameter.
    # @option opts [String] :order_by The form of ordering for response to the sorted request i.e. ascending (asc) or descending (desc).
    # @option opts [String] :filter The filtering rules to be applied when identifying the records to be supplied in the response message.
    # @option opts [Array<String>] :fields To identify the range of fields that should be supplied in the response message.
    # @return [LineItemsType]
    def get_line_items(opts = {})
      data, _status_code, _headers = get_line_items_with_http_info(opts)
      data
    end

    # The REST read request message for the getLineItems() API call.
    # ...not supplied...
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit To define the download segmentation value i.e. the maximum number of records to be contained in the response.
    # @option opts [Integer] :offset The number of the first record to be supplied in the segmented response message.
    # @option opts [String] :continuation_token Allows the client to resume retrieving results from where the previous page left off
    # @option opts [String] :sort Identifies the sort criteria to be used for the records in the response message. Use with the orderBy parameter.
    # @option opts [String] :order_by The form of ordering for response to the sorted request i.e. ascending (asc) or descending (desc).
    # @option opts [String] :filter The filtering rules to be applied when identifying the records to be supplied in the response message.
    # @option opts [Array<String>] :fields To identify the range of fields that should be supplied in the response message.
    # @return [Array<(LineItemsType, Integer, Hash)>] LineItemsType data, response status code and response headers
    def get_line_items_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LineItemsManagementApi.get_line_items ...'
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['acs', 'desc'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of acs, desc'
      end
      # resource path
      local_var_path = '/lineItems'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'continuationToken'] = opts[:'continuation_token'] if !opts[:'continuation_token'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :csv) if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LineItemsType' 

      auth_names = opts[:auth_names] || ['OAuth2Security']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LineItemsManagementApi#get_line_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # The REST read request message for the getLineItemsForClass() API call.
    # ...not supplied...
    # @param class_sourced_id ...tbd...
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit To define the download segmentation value i.e. the maximum number of records to be contained in the response. (default to 100)
    # @option opts [Integer] :offset The number of the first record to be supplied in the segmented response message. (default to 0)
    # @option opts [String] :continuation_token Allows the client to resume retrieving results from where the previous page left off
    # @option opts [String] :sort Identifies the sort criteria to be used for the records in the response message. Use with the orderBy parameter.
    # @option opts [String] :order_by The form of ordering for response to the sorted request i.e. ascending (asc) or descending (desc).
    # @option opts [String] :filter The filtering rules to be applied when identifying the records to be supplied in the response message.
    # @option opts [Array<String>] :fields To identify the range of fields that should be supplied in the response message.
    # @return [LineItemsType]
    def get_line_items_for_class(class_sourced_id, opts = {})
      data, _status_code, _headers = get_line_items_for_class_with_http_info(class_sourced_id, opts)
      data
    end

    # The REST read request message for the getLineItemsForClass() API call.
    # ...not supplied...
    # @param class_sourced_id ...tbd...
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit To define the download segmentation value i.e. the maximum number of records to be contained in the response.
    # @option opts [Integer] :offset The number of the first record to be supplied in the segmented response message.
    # @option opts [String] :continuation_token Allows the client to resume retrieving results from where the previous page left off
    # @option opts [String] :sort Identifies the sort criteria to be used for the records in the response message. Use with the orderBy parameter.
    # @option opts [String] :order_by The form of ordering for response to the sorted request i.e. ascending (asc) or descending (desc).
    # @option opts [String] :filter The filtering rules to be applied when identifying the records to be supplied in the response message.
    # @option opts [Array<String>] :fields To identify the range of fields that should be supplied in the response message.
    # @return [Array<(LineItemsType, Integer, Hash)>] LineItemsType data, response status code and response headers
    def get_line_items_for_class_with_http_info(class_sourced_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LineItemsManagementApi.get_line_items_for_class ...'
      end
      # verify the required parameter 'class_sourced_id' is set
      if @api_client.config.client_side_validation && class_sourced_id.nil?
        fail ArgumentError, "Missing the required parameter 'class_sourced_id' when calling LineItemsManagementApi.get_line_items_for_class"
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['acs', 'desc'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of acs, desc'
      end
      # resource path
      local_var_path = '/classes/{classSourcedId}/lineItems'.sub('{' + 'classSourcedId' + '}', class_sourced_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'continuationToken'] = opts[:'continuation_token'] if !opts[:'continuation_token'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :csv) if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'LineItemsType' 

      auth_names = opts[:auth_names] || ['OAuth2Security']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LineItemsManagementApi#get_line_items_for_class\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # The REST create request message for the putLineItem() API call.
    # ...not supplied...
    # @param body ...tbd...
    # @param sourced_id ...tbd...
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_line_item(body, sourced_id, opts = {})
      put_line_item_with_http_info(body, sourced_id, opts)
      nil
    end

    # The REST create request message for the putLineItem() API call.
    # ...not supplied...
    # @param body ...tbd...
    # @param sourced_id ...tbd...
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def put_line_item_with_http_info(body, sourced_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LineItemsManagementApi.put_line_item ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LineItemsManagementApi.put_line_item"
      end
      # verify the required parameter 'sourced_id' is set
      if @api_client.config.client_side_validation && sourced_id.nil?
        fail ArgumentError, "Missing the required parameter 'sourced_id' when calling LineItemsManagementApi.put_line_item"
      end
      # resource path
      local_var_path = '/lineItems/{sourcedId}'.sub('{' + 'sourcedId' + '}', sourced_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['OAuth2Security']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LineItemsManagementApi#put_line_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
